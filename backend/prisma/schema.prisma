generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  active    Boolean  @default(true)

  name        String
  cnpj        String  @unique
  slug        String  @unique
  email       String
  phoneNumber String?

  users    User[]
  patients Patient[]

  @@map("tenants")
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  active    Boolean  @default(true)

  login    String @unique
  password String
  name     String
  email    String @unique
  role     Role   @default(TENANT_USER)

  tenant   Tenant @relation(fields: [tenantId], references: [id])
  tenantId String

  professional Professional?

  @@map("users")
}

model Professional {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  active    Boolean  @default(true)

  cpf         String    @unique
  name        String
  birthDate   DateTime?
  gender      String
  phoneNumber String
  email       String    @unique

  provider          ProfessionalProvider
  providerNumber    String
  providerCountry   String
  function          ProfessionalFunction
  linkVirtualOffice String?

  specialty   Specialty? @relation(fields: [specialtyId], references: [id])
  specialtyId String?

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  patients PatientHealthRecord[]

  @@map("professionals")
}

model Specialty {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  active    Boolean  @default(true)

  name         String
  group        String?
  Professional Professional[]

  @@map("specialties")
}

model Patient {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  active    Boolean  @default(true)

  tenant   Tenant @relation(fields: [tenantId], references: [id])
  tenantId String

  cpf         String        @unique
  name        String
  birthDate   DateTime
  gender      String
  phoneNumber String
  email       String        @unique
  status      PatientStatus

  healthRecord PatientHealthRecord[]

  @@map("patients")
}

model PatientHealthRecord {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  patient        Patient       @relation(fields: [patientId], references: [id])
  patientId      String
  professional   Professional? @relation(fields: [professionalId], references: [id])
  professionalId String?

  startDate DateTime?
  riskGroup String?
  careLine  String?

  vitalSigns PatientVitalSigns[]
  measures   PatientMeasure[]

  @@map("patient_ehr")
}

model PatientVitalSigns {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  healthRecord   PatientHealthRecord @relation(fields: [healthRecordId], references: [id])
  healthRecordId String

  measurementDate      DateTime
  measurementBy        String
  temperature          Float?
  diastolicPressure    Float?
  systolicPressure     Float?
  heartRate            Float?
  respiratoryFrequency Float?
  oxygenSaturation     Float?

  @@map("patient_vital_signs")
}

model PatientMeasure {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  healthRecord   PatientHealthRecord @relation(fields: [healthRecordId], references: [id])
  healthRecordId String

  measurementDate        DateTime
  measurementBy          String
  height                 Float
  weight                 Float
  imc                    Float
  abdominalCircumference Float

  @@map("patient_measures")
}

model PatientVitalSignsHistory {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  healthRecordId String

  measurementDate      DateTime
  measurementBy        String
  temperature          Float?
  diastolicPressure    Float?
  systolicPressure     Float?
  heartRate            Float?
  respiratoryFrequency Float?
  oxygenSaturation     Float?

  @@index([healthRecordId])
  @@map("patient_vital_signs_history")
}

model PatientMeasureHistory {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  healthRecordId String

  measurementDate        DateTime
  measurementBy          String
  height                 Float
  weight                 Float
  imc                    Float
  abdominalCircumference Float

  @@index([healthRecordId])
  @@map("patient_measures_history")
}

enum PatientStatus {
  WAITING_CONFIRMATION
  INITIAL_EVALUATION
  ACTIVE
  SUSPENDED
  PENDING_PAYMENT
}

enum Role {
  ADMIN
  CORA_MANAGER
  TENANT_ADMIN
  TENANT_USER
}

enum ProfessionalProvider {
  CRM
  CRP
  COREN
}

enum ProfessionalFunction {
  DOCTOR
  NURSE
  PSYCHOLOGY
}
